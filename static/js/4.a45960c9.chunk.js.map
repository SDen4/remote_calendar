{"version":3,"sources":["components/ModalContent/ModalContent.module.css","utils/accessorDatesGenerator.ts","utils/formatInputName.ts","components/ModalContent/ModalContent.tsx"],"names":["module","exports","accessorDatesGenerator","date","name","currentDate","newObj","i","dateFormatter","Date","getTime","slice","formatInputName","wordsArr","String","split","length","undefined","toLocaleUpperCase","join","ModalContent","dispatch","useDispatch","ref","useRef","useEffect","current","focus","data","useSelector","store","reducer","useState","setName","typeOfWork","setTypeOfWork","validFlag","setValidFlag","onRadioClick","useCallback","type","onChangeNameHandler","event","target","value","onSubmitHahdler","preventDefault","namesArr","addArr","newEmployee","addNewEmployee","push","localStorage","setItem","JSON","stringify","reverse","concat","setModalFlag","onCloseModal","className","styles","modalContent","onSubmit","form","labelWrapper","inputWrapper","onChange","validationText","includes","noteText","radioWrapper","defaultChecked","onClick","buttons_wrapper","Button","buttonText","buttonType","onButtonClick","stylesButton","deleteButton","memo"],"mappings":"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","file":"static/js/4.a45960c9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"modalContent\":\"ModalContent_modalContent__2Ret1\",\"form\":\"ModalContent_form__169qh\",\"labelWrapper\":\"ModalContent_labelWrapper__2EgFl\",\"radioWrapper\":\"ModalContent_radioWrapper__2iTLh\",\"buttons_wrapper\":\"ModalContent_buttons_wrapper__1FQ_W\",\"deleteButton\":\"ModalContent_deleteButton__1z69p\",\"inputWrapper\":\"ModalContent_inputWrapper__1Wc4T\",\"validationText\":\"ModalContent_validationText__2UqVI\",\"noteText\":\"ModalContent_noteText__6A_m5\"};","import { dateFormatter } from './dateFormatter';\n\nconst accessorDatesGenerator: any = (date: Date, name: string) => {\n  const currentDate = date;\n  const datesLength = 90; // days in initial range\n\n  let newObj: any = {};\n\n  newObj.name = name;\n\n  for (let i = 0; i < datesLength; i++) {\n    const date = dateFormatter(new Date(currentDate.getTime() + 86400000 * i));\n    const newDate = `a_${date.slice(0, 2)}${date.slice(3, 5)}${date.slice(\n      6,\n      8,\n    )}`;\n\n    newObj[newDate] = 1;\n  }\n  return newObj;\n};\n\nexport default accessorDatesGenerator;\n","const formatInputName = (name: string | number): string => {\n  if (!name) {\n    return '';\n  }\n\n  const wordsArr: string[] = String(name).split(' ');\n\n  for (let i = 0; i < wordsArr.length; i++) {\n    if (wordsArr[i][0] !== undefined) {\n      wordsArr[i] = `${wordsArr[i][0].toLocaleUpperCase()}${wordsArr[i].slice(\n        1,\n      )}`;\n    }\n  }\n\n  return wordsArr.join(' ');\n};\n\nexport default formatInputName;\n","import React, { memo, useCallback, useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { addNewEmployee, setModalFlag } from '../../store/actions';\n\nimport { AppStateType } from '../../store/RootReducer';\nimport { IData } from '../../store/types';\n\nimport Button from '../../ui/Button';\n\nimport accessorDatesGenerator from '../../utils/accessorDatesGenerator';\nimport formatInputName from '../../utils/formatInputName';\n\nimport styles from './ModalContent.module.css';\n\nconst ModalContent: React.FC = () => {\n  const dispatch = useDispatch();\n  const ref: any = useRef(null);\n\n  useEffect(() => {\n    ref.current.focus();\n  }, []);\n\n  const data = useSelector<AppStateType, IData[]>(\n    (store) => store.reducer.data,\n  );\n\n  const [name, setName] = useState<string>('');\n  const [typeOfWork, setTypeOfWork] = useState<string>('office');\n  const [validFlag, setValidFlag] = useState<boolean>(false);\n\n  const onRadioClick = useCallback((type: string) => {\n    setTypeOfWork(type);\n  }, []);\n\n  const onChangeNameHandler = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      setValidFlag(false);\n      setName(formatInputName(event.target.value));\n    },\n    [],\n  );\n\n  const onSubmitHahdler = useCallback(\n    (event: React.SyntheticEvent) => {\n      event.preventDefault();\n\n      if (!name) {\n        setValidFlag(true);\n        return;\n      }\n\n      let namesArr: string[] = [];\n      const re = /\\s*,\\s*/;\n      const addArr = [];\n      namesArr = name.split(re);\n\n      for (let i = 0; i < namesArr.length; i++) {\n        if (typeOfWork === 'office') {\n          const newEmployee = { name: namesArr[i] };\n          dispatch(addNewEmployee(newEmployee));\n          addArr.push(newEmployee);\n        }\n\n        if (typeOfWork === 'remote') {\n          const newEmployee = accessorDatesGenerator(new Date(), namesArr[i]);\n          dispatch(addNewEmployee(newEmployee));\n          addArr.push(newEmployee);\n        }\n      }\n\n      localStorage.setItem(\n        'calendar',\n        JSON.stringify(addArr.reverse().concat(data)),\n      );\n      addArr.length = 0;\n\n      dispatch(setModalFlag(false));\n    },\n    [data, dispatch, name, typeOfWork],\n  );\n\n  const onCloseModal = useCallback(() => {\n    setName('');\n    setTypeOfWork('office');\n    dispatch(setModalFlag(false));\n  }, [dispatch]);\n\n  return (\n    <div className={styles.modalContent}>\n      <h2>Add a new employee</h2>\n\n      <form onSubmit={onSubmitHahdler} className={styles.form}>\n        <div className={styles.labelWrapper}>\n          <label>Name: </label>\n          <div className={styles.inputWrapper}>\n            <input\n              type=\"text\"\n              onChange={onChangeNameHandler}\n              ref={ref}\n              value={name}\n            />\n            {validFlag && (\n              <span className={styles.validationText}>\n                The field can not be empty\n              </span>\n            )}\n            {!name.includes(',') && !validFlag && (\n              <span className={styles.noteText}>\n                You can enter more than 1 employee separated by commas\n              </span>\n            )}\n          </div>\n        </div>\n\n        <div className={styles.labelWrapper}>\n          <label>Place of work:</label>\n\n          <div className={styles.radioWrapper}>\n            <div>\n              <label>office</label>\n              <input\n                type=\"radio\"\n                name=\"radio\"\n                value={typeOfWork}\n                defaultChecked\n                onClick={() => onRadioClick('office')}\n              />\n            </div>\n\n            <div>\n              <label>remote</label>\n              <input\n                type=\"radio\"\n                name=\"radio\"\n                value={typeOfWork}\n                onClick={() => onRadioClick('remote')}\n              />\n            </div>\n          </div>\n        </div>\n      </form>\n\n      <div className={styles.buttons_wrapper}>\n        <Button\n          buttonText=\"Add\"\n          buttonType=\"submit\"\n          onButtonClick={onSubmitHahdler}\n        />\n\n        <Button\n          buttonText=\"Cancel\"\n          buttonType=\"button\"\n          onButtonClick={onCloseModal}\n          stylesButton={styles.deleteButton}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ModalContent);\n"],"sourceRoot":""}